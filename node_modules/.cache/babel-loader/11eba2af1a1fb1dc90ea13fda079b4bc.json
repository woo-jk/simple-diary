{"ast":null,"code":"var _jsxFileName = \"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState, useRef, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport Lifecycle from \"./Lifecycle\";\nimport OptimizeTest from \"./OptimizeTest\"; //useReducer에 들어가는 함수\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\":\n      {\n        return action.data;\n      }\n\n    case \"CREATE\":\n      {\n        const created_date = new Date().getDate();\n        const newItem = { ...action.data,\n          created_date\n        };\n        return [newItem, ...state];\n      }\n\n    case \"REMOVE\":\n      {\n        return state.filter(it => it.id !== action.targetId);\n      }\n\n    case \"EDIT\":\n      {\n        return state.map(it => it.id === action.targetId ? { ...it,\n          content: action.newContent\n        } : it);\n      }\n\n    default:\n      return state;\n  }\n}; // Context에 속한 외부 컴포넌트들이 사용할 수 있도록 export를 붙임\n// export default가 아닌 기본 export인데 이러면 다른 파일에서 비구조화 할당을 통해 import 해야함\n// ex. import App, {DiaryStateContext} from /App.js\n\n\nexport const DiaryStateContext = /*#__PURE__*/React.createContext();\nexport const DiaryDispatchContext = /*#__PURE__*/React.createContext();\n\nfunction App() {\n  _s();\n\n  // const [data, setData] = useState([]);\n  // useState 대신 사용하는 useReducer\n  // useState 를 최적화해서 대신 사용하는 것이지만 useState를 사용해도 됨\n  const [data, dispatch] = useReducer(reducer, []);\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\").then(res => res.json());\n    const initData = res.slice(0, 20).map(it => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    dispatch({\n      type: \"INIT\",\n      data: initData\n    }); // useState 용\n    // setData(initData);\n  }; //처음 렌더링 될 때 실행함\n\n\n  useEffect(() => {\n    getData();\n  }, []);\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: {\n        author,\n        content,\n        emotion,\n        id: dataId.current\n      }\n    }); // useState 용\n    // const created_date = new Date().getTime();\n    // const newItem = {\n    //   author,\n    //   content,\n    //   emotion,\n    //   created_date,\n    //   id: dataId.current,\n    // };\n\n    dataId.current += 1; //새로운 일기가 제일 위로 가야하므로 spread보다 앞에\n    // setData((data) => [newItem, ...data]);\n  }, []);\n  const onRemove = useCallback(targetId => {\n    dispatch({\n      type: \"REMOVE\",\n      targetId\n    }); // useState 용\n    //   setData((data) => data.filter((it) => it.id !== targetId));\n  }, []);\n  const onEdit = useCallback((targetId, newContent) => {\n    dispatch({\n      type: \"EDIT\",\n      targetId,\n      newContent\n    }); // useState 용\n    // setData((data) =>\n    //   data.map((it) =>\n    //     it.id === targetId ? { ...it, content: newContent } : it\n    //   )\n    // );\n  }, []);\n  const memoizedDispatches = useMemo(() => {\n    return {\n      onCreate,\n      onRemove,\n      onEdit\n    };\n  }, []);\n  const getDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter(it => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = goodCount / data.length * 100;\n    return {\n      goodCount,\n      badCount,\n      goodRatio\n    };\n  }, [data.length]);\n  const {\n    goodCount,\n    badCount,\n    goodRatio\n  } = getDiaryAnalysis;\n  return (\n    /*#__PURE__*/\n    // data는 DiaryStateContext로 사용\n    _jsxDEV(DiaryStateContext.Provider, {\n      value: data,\n      children: /*#__PURE__*/_jsxDEV(DiaryDispatchContext.Provider, {\n        value: memoizedDispatches,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(DiaryEditor\n          /*onCreate={onCreate }*/\n          , {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC804\\uCCB4 \\uC77C\\uAE30 : \", data.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uAE30\\uBD84\\uC774 \\uC88B\\uC740 \\uC77C\\uAE30 \\uAC1C\\uC218 : \", goodCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uAE30\\uBD84\\uC774 \\uB098\\uC05C \\uC77C\\uAE30 \\uAC1C\\uC218 : \", badCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uBE44\\uC728 : \", goodRatio]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DiaryList\n          /* onEdit={onEdit} onRemove={onRemove} diaryList={data} */\n          , {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"2FswuqedLy8DIU7Ir+zqwO+E85A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/App.js"],"names":["React","useCallback","useMemo","useState","useRef","useEffect","useReducer","DiaryEditor","DiaryList","Lifecycle","OptimizeTest","reducer","state","action","type","data","created_date","Date","getDate","newItem","filter","it","id","targetId","map","content","newContent","DiaryStateContext","createContext","DiaryDispatchContext","App","dispatch","dataId","getData","res","fetch","then","json","initData","slice","author","email","body","emotion","Math","floor","random","getTime","current","onCreate","onRemove","onEdit","memoizedDispatches","getDiaryAnalysis","goodCount","length","badCount","goodRatio"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n  useReducer,\n} from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport Lifecycle from \"./Lifecycle\";\nimport OptimizeTest from \"./OptimizeTest\";\n\n//useReducer에 들어가는 함수\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\": {\n      return action.data;\n    }\n    case \"CREATE\": {\n      const created_date = new Date().getDate();\n      const newItem = {\n        ...action.data,\n        created_date,\n      };\n      return [newItem, ...state];\n    }\n    case \"REMOVE\": {\n      return state.filter((it) => it.id !== action.targetId);\n    }\n    case \"EDIT\": {\n      return state.map((it) =>\n        it.id === action.targetId ? { ...it, content: action.newContent } : it\n      );\n    }\n    default:\n      return state;\n  }\n};\n\n// Context에 속한 외부 컴포넌트들이 사용할 수 있도록 export를 붙임\n// export default가 아닌 기본 export인데 이러면 다른 파일에서 비구조화 할당을 통해 import 해야함\n// ex. import App, {DiaryStateContext} from /App.js\nexport const DiaryStateContext = React.createContext();\nexport const DiaryDispatchContext = React.createContext();\n\nfunction App() {\n  // const [data, setData] = useState([]);\n\n  // useState 대신 사용하는 useReducer\n  // useState 를 최적화해서 대신 사용하는 것이지만 useState를 사용해도 됨\n  const [data, dispatch] = useReducer(reducer, []);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      \"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res) => res.json());\n\n    const initData = res.slice(0, 20).map((it) => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    dispatch({ type: \"INIT\", data: initData });\n    // useState 용\n    // setData(initData);\n  };\n\n  //처음 렌더링 될 때 실행함\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: { author, content, emotion, id: dataId.current },\n    });\n\n    // useState 용\n    // const created_date = new Date().getTime();\n    // const newItem = {\n    //   author,\n    //   content,\n    //   emotion,\n    //   created_date,\n    //   id: dataId.current,\n    // };\n    dataId.current += 1;\n    //새로운 일기가 제일 위로 가야하므로 spread보다 앞에\n    // setData((data) => [newItem, ...data]);\n  }, []);\n\n  const onRemove = useCallback((targetId) => {\n    dispatch({ type: \"REMOVE\", targetId });\n\n    // useState 용\n    //   setData((data) => data.filter((it) => it.id !== targetId));\n  }, []);\n\n  const onEdit = useCallback((targetId, newContent) => {\n    dispatch({ type: \"EDIT\", targetId, newContent });\n\n    // useState 용\n    // setData((data) =>\n    //   data.map((it) =>\n    //     it.id === targetId ? { ...it, content: newContent } : it\n    //   )\n    // );\n  }, []);\n\n  const memoizedDispatches = useMemo(() => {\n    return { onCreate, onRemove, onEdit };\n  }, []);\n\n  const getDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100;\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis;\n\n  return (\n    // data는 DiaryStateContext로 사용\n    <DiaryStateContext.Provider value={data}>\n      {/* onCreate, onEdit, onRemove 함수는 DiaryDispatchContext로 사용 */}\n      <DiaryDispatchContext.Provider value={memoizedDispatches}>\n        <div className=\"App\">\n          {/* <Lifecycle /> */}\n          {/* <OptimizeTest /> */}\n\n          <DiaryEditor /*onCreate={onCreate }*/ />\n          <div>전체 일기 : {data.length}</div>\n          <div>기분이 좋은 일기 개수 : {goodCount}</div>\n          <div>기분이 나쁜 일기 개수 : {badCount}</div>\n          <div>기분 좋은 일기 비율 : {goodRatio}</div>\n          <DiaryList /* onEdit={onEdit} onRemove={onRemove} diaryList={data} */\n          />\n        </div>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}