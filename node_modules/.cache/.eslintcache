[{"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/index.js":"1","/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/App.js":"2","/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/Lifecycle.js":"3","/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/DiaryList.js":"4","/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/DiaryEditor.js":"5","/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/OptimizeTest.js":"6","/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/DiaryItem.js":"7"},{"size":432,"mtime":1649702576540,"results":"8","hashOfConfig":"9"},{"size":3623,"mtime":1649961564846,"results":"10","hashOfConfig":"9"},{"size":566,"mtime":1649798218666,"results":"11","hashOfConfig":"9"},{"size":541,"mtime":1649961611251,"results":"12","hashOfConfig":"9"},{"size":1861,"mtime":1649961583871,"results":"13","hashOfConfig":"9"},{"size":1005,"mtime":1649869781252,"results":"14","hashOfConfig":"9"},{"size":1942,"mtime":1649961614264,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"110ntgy",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/index.js",[],[],"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/App.js",["40","41","42","43","44"],[],"import React, {\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n  useReducer,\n} from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport Lifecycle from \"./Lifecycle\";\nimport OptimizeTest from \"./OptimizeTest\";\n\n//useReducer에 들어가는 함수\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\": {\n      return action.data;\n    }\n    case \"CREATE\": {\n      const created_date = new Date().getDate();\n      const newItem = {\n        ...action.data,\n        created_date,\n      };\n      return [newItem, ...state];\n    }\n    case \"REMOVE\": {\n      return state.filter((it) => it.id !== action.targetId);\n    }\n    case \"EDIT\": {\n      return state.map((it) =>\n        it.id === action.targetId ? { ...it, content: action.newContent } : it\n      );\n    }\n    default:\n      return state;\n  }\n};\n\n// Context에 속한 외부 컴포넌트들이 사용할 수 있도록 export를 붙임\n// export default가 아닌 기본 export인데 이러면 다른 파일에서 비구조화 할당을 통해 import 해야함\n// ex. import App, {DiaryStateContext} from /App.js\nexport const DiaryStateContext = React.createContext();\nexport const DiaryDispatchContext = React.createContext();\n\nfunction App() {\n  // useState 대신 사용하는 useReducer\n  // useState 를 최적화해서 대신 사용하는 것이지만 useState를 사용해도 됨\n  const [data, dispatch] = useReducer(reducer, []);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      \"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res) => res.json());\n\n    const initData = res.slice(0, 20).map((it) => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    //\n    dispatch({ type: \"INIT\", data: initData });\n  };\n\n  //처음 렌더링 될 때 실행함\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: { author, content, emotion, id: dataId.current },\n    });\n    dataId.current += 1;\n  }, []);\n\n  const onRemove = useCallback((targetId) => {\n    dispatch({ type: \"REMOVE\", targetId });\n  }, []);\n\n  const onEdit = useCallback((targetId, newContent) => {\n    dispatch({ type: \"EDIT\", targetId, newContent });\n  }, []);\n\n  const memoizedDispatches = useMemo(() => {\n    return { onCreate, onRemove, onEdit };\n  }, []);\n\n  const getDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100;\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis;\n\n  return (\n    // data는 DiaryStateContext로 사용\n    <DiaryStateContext.Provider value={data}>\n      <DiaryDispatchContext.Provider value={memoizedDispatches}>\n        <div className=\"App\">\n          {/* <Lifecycle /> */}\n          {/* <OptimizeTest /> */}\n\n          <DiaryEditor />\n          <div>전체 일기 : {data.length}</div>\n          <div>기분이 좋은 일기 개수 : {goodCount}</div>\n          <div>기분이 나쁜 일기 개수 : {badCount}</div>\n          <div>기분 좋은 일기 비율 : {goodRatio}</div>\n          <DiaryList />\n        </div>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n}\n\nexport default App;\n",["45","46"],"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/Lifecycle.js",[],[],"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/DiaryList.js",[],[],"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/DiaryEditor.js",[],[],"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/OptimizeTest.js",[],[],"/Users/woo-jungkyun/Project/React_Study/simplediary-reducer,context/src/DiaryItem.js",["47"],[],"import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { DiaryDispatchContext } from \"./App\";\n\nconst DiaryItem = ({ author, content, created_date, emotion, id }) => {\n  const { onRemove, onEdit } = useContext(DiaryDispatchContext);\n\n  const [isEdit, setIsEdit] = useState(false);\n  const toggleIsEdit = () => setIsEdit(!isEdit);\n\n  const [localContent, setLocalContent] = useState(content);\n  const localContentInput = useRef();\n\n  const handleRemove = () => {\n    if (window.confirm(`${id}번째 일기를 정말 삭제하시겠습니까?`)) {\n      onRemove(id);\n    }\n  };\n\n  const handleQuitEdit = () => {\n    setIsEdit(false);\n    setLocalContent(content);\n  };\n\n  const handleEdit = () => {\n    if (localContent.length < 5) {\n      localContentInput.current.focus();\n      return;\n    }\n    if (window.confirm(`${id}번 째 일기를 수정하시겠습니까?`)) {\n      onEdit(id, localContent);\n      toggleIsEdit();\n    }\n  };\n\n  return (\n    <div className=\"DiaryItem\">\n      <div className=\"info\">\n        <span>\n          작성자 : {author} | 감정점수 : {emotion}\n        </span>\n        <br />\n        <span className=\"date\">{new Date(created_date).toLocaleString()}</span>\n      </div>\n      <div className=\"content\">\n        {isEdit ? (\n          <>\n            <textarea\n              ref={localContentInput}\n              value={localContent}\n              onChange={(e) => setLocalContent(e.target.value)}\n            />\n          </>\n        ) : (\n          <>{content}</>\n        )}\n      </div>\n      {isEdit ? (\n        <>\n          <button onClick={handleQuitEdit}>수정 취소</button>\n          <button onClick={handleEdit}>수정 완료</button>\n        </>\n      ) : (\n        <>\n          <button onClick={handleRemove}>삭제하기</button>\n          <button onClick={toggleIsEdit}>수정하기</button>\n        </>\n      )}\n    </div>\n  );\n};\nexport default React.memo(DiaryItem);\n",{"ruleId":"48","severity":1,"message":"49","line":4,"column":3,"nodeType":"50","messageId":"51","endLine":4,"endColumn":11},{"ruleId":"48","severity":1,"message":"52","line":12,"column":8,"nodeType":"50","messageId":"51","endLine":12,"endColumn":17},{"ruleId":"48","severity":1,"message":"53","line":13,"column":8,"nodeType":"50","messageId":"51","endLine":13,"endColumn":20},{"ruleId":"54","severity":1,"message":"55","line":96,"column":6,"nodeType":"56","endLine":96,"endColumn":8,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":103,"column":6,"nodeType":"56","endLine":103,"endColumn":19,"suggestions":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"48","severity":1,"message":"64","line":1,"column":29,"nodeType":"50","messageId":"51","endLine":1,"endColumn":38},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Lifecycle' is defined but never used.","'OptimizeTest' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'onCreate', 'onEdit', and 'onRemove'. Either include them or remove the dependency array.","ArrayExpression",["65"],"React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.",["66"],"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'useEffect' is defined but never used.",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [onCreate, onEdit, onRemove]",{"range":"73","text":"74"},"Update the dependencies array to be: [data]",{"range":"75","text":"76"},[2411,2413],"[onCreate, onEdit, onRemove]",[2680,2693],"[data]"]